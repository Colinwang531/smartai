// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StreamPlay.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_StreamPlay_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_StreamPlay_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_StreamPlay_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_StreamPlay_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_StreamPlay_2eproto;
class NetworkDevice;
class NetworkDeviceDefaultTypeInternal;
extern NetworkDeviceDefaultTypeInternal _NetworkDevice_default_instance_;
class StreamPlay;
class StreamPlayDefaultTypeInternal;
extern StreamPlayDefaultTypeInternal _StreamPlay_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::NetworkDevice* Arena::CreateMaybeMessage<::NetworkDevice>(Arena*);
template<> ::StreamPlay* Arena::CreateMaybeMessage<::StreamPlay>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum StreamPlay_StreamType : int {
  StreamPlay_StreamType_HIKVISION_PRIVATE = 1,
  StreamPlay_StreamType_HIKVISION_PS = 2,
  StreamPlay_StreamType_DAHUA_PRIVATE = 3,
  StreamPlay_StreamType_DAHUA_PS = 4,
  StreamPlay_StreamType_H264 = 5,
  StreamPlay_StreamType_H265 = 6
};
bool StreamPlay_StreamType_IsValid(int value);
constexpr StreamPlay_StreamType StreamPlay_StreamType_StreamType_MIN = StreamPlay_StreamType_HIKVISION_PRIVATE;
constexpr StreamPlay_StreamType StreamPlay_StreamType_StreamType_MAX = StreamPlay_StreamType_H265;
constexpr int StreamPlay_StreamType_StreamType_ARRAYSIZE = StreamPlay_StreamType_StreamType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamPlay_StreamType_descriptor();
template<typename T>
inline const std::string& StreamPlay_StreamType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamPlay_StreamType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamPlay_StreamType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamPlay_StreamType_descriptor(), enum_t_value);
}
inline bool StreamPlay_StreamType_Parse(
    const std::string& name, StreamPlay_StreamType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamPlay_StreamType>(
    StreamPlay_StreamType_descriptor(), name, value);
}
enum StreamPlay_PlayStatus : int {
  StreamPlay_PlayStatus_Play = 1,
  StreamPlay_PlayStatus_Stop = 2
};
bool StreamPlay_PlayStatus_IsValid(int value);
constexpr StreamPlay_PlayStatus StreamPlay_PlayStatus_PlayStatus_MIN = StreamPlay_PlayStatus_Play;
constexpr StreamPlay_PlayStatus StreamPlay_PlayStatus_PlayStatus_MAX = StreamPlay_PlayStatus_Stop;
constexpr int StreamPlay_PlayStatus_PlayStatus_ARRAYSIZE = StreamPlay_PlayStatus_PlayStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamPlay_PlayStatus_descriptor();
template<typename T>
inline const std::string& StreamPlay_PlayStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamPlay_PlayStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamPlay_PlayStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamPlay_PlayStatus_descriptor(), enum_t_value);
}
inline bool StreamPlay_PlayStatus_Parse(
    const std::string& name, StreamPlay_PlayStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamPlay_PlayStatus>(
    StreamPlay_PlayStatus_descriptor(), name, value);
}
// ===================================================================

class NetworkDevice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetworkDevice) */ {
 public:
  NetworkDevice();
  virtual ~NetworkDevice();

  NetworkDevice(const NetworkDevice& from);
  NetworkDevice(NetworkDevice&& from) noexcept
    : NetworkDevice() {
    *this = ::std::move(from);
  }

  inline NetworkDevice& operator=(const NetworkDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkDevice& operator=(NetworkDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkDevice* internal_default_instance() {
    return reinterpret_cast<const NetworkDevice*>(
               &_NetworkDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetworkDevice& a, NetworkDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkDevice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkDevice* New() const final {
    return CreateMaybeMessage<NetworkDevice>(nullptr);
  }

  NetworkDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkDevice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkDevice& from);
  void MergeFrom(const NetworkDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetworkDevice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StreamPlay_2eproto);
    return ::descriptor_table_StreamPlay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kNameFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kPortFieldNumber = 2,
  };
  // required string address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // required string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string password = 4;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // required uint32 port = 2;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:NetworkDevice)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  friend struct ::TableStruct_StreamPlay_2eproto;
};
// -------------------------------------------------------------------

class StreamPlay :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StreamPlay) */ {
 public:
  StreamPlay();
  virtual ~StreamPlay();

  StreamPlay(const StreamPlay& from);
  StreamPlay(StreamPlay&& from) noexcept
    : StreamPlay() {
    *this = ::std::move(from);
  }

  inline StreamPlay& operator=(const StreamPlay& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamPlay& operator=(StreamPlay&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamPlay& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamPlay* internal_default_instance() {
    return reinterpret_cast<const StreamPlay*>(
               &_StreamPlay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamPlay& a, StreamPlay& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamPlay* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamPlay* New() const final {
    return CreateMaybeMessage<StreamPlay>(nullptr);
  }

  StreamPlay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamPlay>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamPlay& from);
  void MergeFrom(const StreamPlay& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamPlay* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StreamPlay";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_StreamPlay_2eproto);
    return ::descriptor_table_StreamPlay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StreamPlay_StreamType StreamType;
  static constexpr StreamType HIKVISION_PRIVATE =
    StreamPlay_StreamType_HIKVISION_PRIVATE;
  static constexpr StreamType HIKVISION_PS =
    StreamPlay_StreamType_HIKVISION_PS;
  static constexpr StreamType DAHUA_PRIVATE =
    StreamPlay_StreamType_DAHUA_PRIVATE;
  static constexpr StreamType DAHUA_PS =
    StreamPlay_StreamType_DAHUA_PS;
  static constexpr StreamType H264 =
    StreamPlay_StreamType_H264;
  static constexpr StreamType H265 =
    StreamPlay_StreamType_H265;
  static inline bool StreamType_IsValid(int value) {
    return StreamPlay_StreamType_IsValid(value);
  }
  static constexpr StreamType StreamType_MIN =
    StreamPlay_StreamType_StreamType_MIN;
  static constexpr StreamType StreamType_MAX =
    StreamPlay_StreamType_StreamType_MAX;
  static constexpr int StreamType_ARRAYSIZE =
    StreamPlay_StreamType_StreamType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StreamType_descriptor() {
    return StreamPlay_StreamType_descriptor();
  }
  template<typename T>
  static inline const std::string& StreamType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StreamType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StreamType_Name.");
    return StreamPlay_StreamType_Name(enum_t_value);
  }
  static inline bool StreamType_Parse(const std::string& name,
      StreamType* value) {
    return StreamPlay_StreamType_Parse(name, value);
  }

  typedef StreamPlay_PlayStatus PlayStatus;
  static constexpr PlayStatus Play =
    StreamPlay_PlayStatus_Play;
  static constexpr PlayStatus Stop =
    StreamPlay_PlayStatus_Stop;
  static inline bool PlayStatus_IsValid(int value) {
    return StreamPlay_PlayStatus_IsValid(value);
  }
  static constexpr PlayStatus PlayStatus_MIN =
    StreamPlay_PlayStatus_PlayStatus_MIN;
  static constexpr PlayStatus PlayStatus_MAX =
    StreamPlay_PlayStatus_PlayStatus_MAX;
  static constexpr int PlayStatus_ARRAYSIZE =
    StreamPlay_PlayStatus_PlayStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PlayStatus_descriptor() {
    return StreamPlay_PlayStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& PlayStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PlayStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PlayStatus_Name.");
    return StreamPlay_PlayStatus_Name(enum_t_value);
  }
  static inline bool PlayStatus_Parse(const std::string& name,
      PlayStatus* value) {
    return StreamPlay_PlayStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kChannelFieldNumber = 2,
    kTypeFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // required .NetworkDevice device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::NetworkDevice& device() const;
  ::NetworkDevice* release_device();
  ::NetworkDevice* mutable_device();
  void set_allocated_device(::NetworkDevice* device);
  private:
  const ::NetworkDevice& _internal_device() const;
  ::NetworkDevice* _internal_mutable_device();
  public:

  // required int32 channel = 2;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .StreamPlay.StreamType type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::StreamPlay_StreamType type() const;
  void set_type(::StreamPlay_StreamType value);
  private:
  ::StreamPlay_StreamType _internal_type() const;
  void _internal_set_type(::StreamPlay_StreamType value);
  public:

  // required .StreamPlay.PlayStatus status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::StreamPlay_PlayStatus status() const;
  void set_status(::StreamPlay_PlayStatus value);
  private:
  ::StreamPlay_PlayStatus _internal_status() const;
  void _internal_set_status(::StreamPlay_PlayStatus value);
  public:

  // @@protoc_insertion_point(class_scope:StreamPlay)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::NetworkDevice* device_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  int type_;
  int status_;
  friend struct ::TableStruct_StreamPlay_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkDevice

// required string address = 1;
inline bool NetworkDevice::_internal_has_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetworkDevice::has_address() const {
  return _internal_has_address();
}
inline void NetworkDevice::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetworkDevice::address() const {
  // @@protoc_insertion_point(field_get:NetworkDevice.address)
  return _internal_address();
}
inline void NetworkDevice::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:NetworkDevice.address)
}
inline std::string* NetworkDevice::mutable_address() {
  // @@protoc_insertion_point(field_mutable:NetworkDevice.address)
  return _internal_mutable_address();
}
inline const std::string& NetworkDevice::_internal_address() const {
  return address_.GetNoArena();
}
inline void NetworkDevice::_internal_set_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NetworkDevice::set_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetworkDevice.address)
}
inline void NetworkDevice::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetworkDevice.address)
}
inline void NetworkDevice::set_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetworkDevice.address)
}
inline std::string* NetworkDevice::_internal_mutable_address() {
  _has_bits_[0] |= 0x00000001u;
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkDevice::release_address() {
  // @@protoc_insertion_point(field_release:NetworkDevice.address)
  if (!_internal_has_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return address_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkDevice::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:NetworkDevice.address)
}

// required uint32 port = 2;
inline bool NetworkDevice::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NetworkDevice::has_port() const {
  return _internal_has_port();
}
inline void NetworkDevice::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkDevice::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkDevice::port() const {
  // @@protoc_insertion_point(field_get:NetworkDevice.port)
  return _internal_port();
}
inline void NetworkDevice::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  port_ = value;
}
inline void NetworkDevice::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:NetworkDevice.port)
}

// required string name = 3;
inline bool NetworkDevice::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetworkDevice::has_name() const {
  return _internal_has_name();
}
inline void NetworkDevice::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NetworkDevice::name() const {
  // @@protoc_insertion_point(field_get:NetworkDevice.name)
  return _internal_name();
}
inline void NetworkDevice::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NetworkDevice.name)
}
inline std::string* NetworkDevice::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NetworkDevice.name)
  return _internal_mutable_name();
}
inline const std::string& NetworkDevice::_internal_name() const {
  return name_.GetNoArena();
}
inline void NetworkDevice::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NetworkDevice::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetworkDevice.name)
}
inline void NetworkDevice::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetworkDevice.name)
}
inline void NetworkDevice::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetworkDevice.name)
}
inline std::string* NetworkDevice::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkDevice::release_name() {
  // @@protoc_insertion_point(field_release:NetworkDevice.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkDevice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NetworkDevice.name)
}

// required string password = 4;
inline bool NetworkDevice::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetworkDevice::has_password() const {
  return _internal_has_password();
}
inline void NetworkDevice::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NetworkDevice::password() const {
  // @@protoc_insertion_point(field_get:NetworkDevice.password)
  return _internal_password();
}
inline void NetworkDevice::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:NetworkDevice.password)
}
inline std::string* NetworkDevice::mutable_password() {
  // @@protoc_insertion_point(field_mutable:NetworkDevice.password)
  return _internal_mutable_password();
}
inline const std::string& NetworkDevice::_internal_password() const {
  return password_.GetNoArena();
}
inline void NetworkDevice::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NetworkDevice::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetworkDevice.password)
}
inline void NetworkDevice::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetworkDevice.password)
}
inline void NetworkDevice::set_password(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetworkDevice.password)
}
inline std::string* NetworkDevice::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000004u;
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkDevice::release_password() {
  // @@protoc_insertion_point(field_release:NetworkDevice.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return password_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkDevice::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:NetworkDevice.password)
}

// -------------------------------------------------------------------

// StreamPlay

// required .NetworkDevice device = 1;
inline bool StreamPlay::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || device_ != nullptr);
  return value;
}
inline bool StreamPlay::has_device() const {
  return _internal_has_device();
}
inline void StreamPlay::clear_device() {
  if (device_ != nullptr) device_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::NetworkDevice& StreamPlay::_internal_device() const {
  const ::NetworkDevice* p = device_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NetworkDevice*>(
      &::_NetworkDevice_default_instance_);
}
inline const ::NetworkDevice& StreamPlay::device() const {
  // @@protoc_insertion_point(field_get:StreamPlay.device)
  return _internal_device();
}
inline ::NetworkDevice* StreamPlay::release_device() {
  // @@protoc_insertion_point(field_release:StreamPlay.device)
  _has_bits_[0] &= ~0x00000001u;
  ::NetworkDevice* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::NetworkDevice* StreamPlay::_internal_mutable_device() {
  _has_bits_[0] |= 0x00000001u;
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::NetworkDevice>(GetArenaNoVirtual());
    device_ = p;
  }
  return device_;
}
inline ::NetworkDevice* StreamPlay::mutable_device() {
  // @@protoc_insertion_point(field_mutable:StreamPlay.device)
  return _internal_mutable_device();
}
inline void StreamPlay::set_allocated_device(::NetworkDevice* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:StreamPlay.device)
}

// required int32 channel = 2;
inline bool StreamPlay::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StreamPlay::has_channel() const {
  return _internal_has_channel();
}
inline void StreamPlay::clear_channel() {
  channel_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StreamPlay::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StreamPlay::channel() const {
  // @@protoc_insertion_point(field_get:StreamPlay.channel)
  return _internal_channel();
}
inline void StreamPlay::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  channel_ = value;
}
inline void StreamPlay::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:StreamPlay.channel)
}

// required .StreamPlay.StreamType type = 3;
inline bool StreamPlay::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StreamPlay::has_type() const {
  return _internal_has_type();
}
inline void StreamPlay::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::StreamPlay_StreamType StreamPlay::_internal_type() const {
  return static_cast< ::StreamPlay_StreamType >(type_);
}
inline ::StreamPlay_StreamType StreamPlay::type() const {
  // @@protoc_insertion_point(field_get:StreamPlay.type)
  return _internal_type();
}
inline void StreamPlay::_internal_set_type(::StreamPlay_StreamType value) {
  assert(::StreamPlay_StreamType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void StreamPlay::set_type(::StreamPlay_StreamType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:StreamPlay.type)
}

// required .StreamPlay.PlayStatus status = 4;
inline bool StreamPlay::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StreamPlay::has_status() const {
  return _internal_has_status();
}
inline void StreamPlay::clear_status() {
  status_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::StreamPlay_PlayStatus StreamPlay::_internal_status() const {
  return static_cast< ::StreamPlay_PlayStatus >(status_);
}
inline ::StreamPlay_PlayStatus StreamPlay::status() const {
  // @@protoc_insertion_point(field_get:StreamPlay.status)
  return _internal_status();
}
inline void StreamPlay::_internal_set_status(::StreamPlay_PlayStatus value) {
  assert(::StreamPlay_PlayStatus_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
}
inline void StreamPlay::set_status(::StreamPlay_PlayStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:StreamPlay.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::StreamPlay_StreamType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StreamPlay_StreamType>() {
  return ::StreamPlay_StreamType_descriptor();
}
template <> struct is_proto_enum< ::StreamPlay_PlayStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StreamPlay_PlayStatus>() {
  return ::StreamPlay_PlayStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_StreamPlay_2eproto
